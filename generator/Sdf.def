definition

%%% $Id: Aliases.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                  
module languages/sdf2/syntax/Aliases

imports languages/sdf2/syntax/Kernel

exports
  sorts Alias Aliases
  context-free syntax 
    "aliases" Aliases              -> Grammar  {cons("Aliases")}
    Symbol arrow:"->" alias:Symbol -> Alias    {cons("Alias")}
    list:Alias*                    -> Aliases

%%% $Id: Basic.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                
module languages/sdf2/syntax/Basic

imports languages/sdf2/syntax/Kernel

exports
  context-free syntax
    "lexical" "syntax"      Productions -> Grammar  {cons("LexicalSyntax")}
    "context-free" "syntax" Productions -> Grammar  {cons("ContextFreeSyntax")}
    "variables"             Productions -> Grammar  {cons("Variables")}
    "lexical" "variables"   Productions -> Grammar  {cons("LexicalVariables")}

    "<" Symbol "-CF"  ">"               -> Symbol  {cons("Cf")}
    "<" Symbol "-LEX" ">"               -> Symbol  {cons("Lex")}
    "<" Symbol "-VAR" ">"               -> Symbol  {cons("Varsym")}

    "LAYOUT"                            -> Symbol  {cons("Layout")}

%%% $Id: CC.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                  
module languages/sdf2/syntax/CC

imports languages/sdf2/syntax/Character-Class 
        languages/sdf2/syntax/Kernel

exports
  context-free syntax
    CharClass -> Symbol {cons("CharClass")}
     
%%% $Id: Character-Class.sdf 17765 2006-02-13 12:54:52Z jurgenv $
           
module languages/sdf2/syntax/Character-Class

imports languages/sdf2/syntax/Character

exports
  sorts CharClass CharRange CharRanges OptCharRanges 
  context-free syntax 
    Character                           -> CharRange
    start:Character "-" end:Character   -> CharRange            {cons("Range")}

    CharRange                                   -> CharRanges
    "left":CharRanges "right":CharRanges        -> CharRanges   {cons("Conc"),right,memo}
    "(" CharRanges ")"                          -> CharRanges   {bracket}

                              -> OptCharRanges  {cons("Absent")}
    CharRanges                -> OptCharRanges  {cons("Present")}

    "[" OptCharRanges "]"                    -> CharClass  {cons("SimpleCharclass")}
    "~" CharClass                            -> CharClass  {cons("Comp")}
    "left":CharClass "/" "right":CharClass   -> CharClass  {cons("Diff"),left,memo}
    "left":CharClass "/\\" "right":CharClass -> CharClass  {cons("Isect"),left,memo}
    "left":CharClass "\\/" "right":CharClass -> CharClass  {cons("Union"),left}
    "(" CharClass ")"                        -> CharClass  {bracket, avoid}

  context-free priorities
    "~" CharClass             -> CharClass >
    CharClass "/" CharClass   -> CharClass >
    CharClass "/\\" CharClass -> CharClass >
    CharClass "\\/" CharClass -> CharClass           
%%% $Id: Character.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                     
module languages/sdf2/syntax/Character



exports
  sorts Character NumChar ShortChar
  lexical syntax
    [\\] number:[0-9]+                     -> NumChar   {cons("Digits")}
    character:[a-zA-Z0-9]                  -> ShortChar {cons("Regular")}
    [\\] escape:~[\0-\31A-Za-mo-qsu-z0-9]  -> ShortChar {cons("Escaped")}

  context-free syntax
    NumChar   -> Character {cons("Numeric")}
    ShortChar -> Character {cons("Short")}
    "\\TOP"   -> Character {cons("Top")}
    "\\EOF"   -> Character {cons("Eof")}
    "\\BOT"   -> Character {cons("Bot")}
    "\\LABEL_START" -> Character {cons("Label_start")}

   
%%% $Id: Grammars.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                    
module languages/sdf2/syntax/Grammars

imports basic/Comments

exports
  sorts Grammar
  context-free syntax    
    "(/)"                          -> Grammar  {cons("EmptyGrammar")}
    "left":Grammar "right":Grammar -> Grammar  {assoc,cons("ConcGrammars")}
    "(" Grammar ")"                -> Grammar  {bracket}

%%% $Id: Kernel.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                                                            
module languages/sdf2/syntax/Kernel

imports languages/aterm/syntax/ATerms 
        languages/sdf2/syntax/Symbols 
        languages/sdf2/syntax/Grammars

exports
  sorts Attribute ATermAttribute Attributes Production Productions
  context-free syntax
    aterm:ATerm    -> ATermAttribute  {cons("Default")}
    ATermAttribute -> Attribute       {cons("Term")}

    "{" list:{Attribute ","}* "}" -> Attributes  {cons("Attrs")}
                                  -> Attributes  {cons("NoAttrs")}

    Symbols "->" result:Symbol Attributes -> Production  {cons("Prod")}

    list:Production* -> Productions

    "syntax" Productions -> Grammar {cons("Syntax")}
%%% $Id: Labels.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                               
module languages/sdf2/syntax/Labels

imports languages/sdf2/syntax/Kernel 
        basic/StrCon

exports 
  sorts Label

  context-free syntax
    StrCon -> Label {cons("Quoted")}
    IdCon  -> Label {cons("Unquoted")}

    Label ":" Symbol -> Symbol  {cons("Label")}
module languages/sdf2/syntax/Lifting

imports languages/sdf2/syntax/Kernel

exports
  context-free syntax
    left-quote:"`" Symbol right-quote:"`" -> Symbol  {cons("Lifting")}
%%% $Id: Literals.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                                                  
module languages/sdf2/syntax/Literals

imports languages/sdf2/syntax/Kernel 
imports basic/StrCon
imports basic/IdentifierCon

exports
  sorts FunctionName SingleQuotedStrCon SingleQuotedStrChar
  lexical syntax

    "\\n"                      -> SingleQuotedStrChar {cons("Newline")}
    "\\t"                      -> SingleQuotedStrChar {cons("Tab")}
    "\\'"                      -> SingleQuotedStrChar {cons("Quote")}
    "\\\\"                     -> SingleQuotedStrChar {cons("Backslash")}
    "\\" a:[0-9]b:[0-9]c:[0-9] -> SingleQuotedStrChar {cons("Decimal")}
    ~[\0-\31\n\t\'\\]          -> SingleQuotedStrChar {cons("Normal")}

    [\'] chars:SingleQuotedStrChar* [\']   -> SingleQuotedStrCon  {cons("Default")}

  context-free syntax
    IdCon  -> FunctionName {cons("UnquotedFun")}
    StrCon -> FunctionName {cons("QuotedFun")}

  context-free syntax
    string:StrCon                -> Symbol {cons("Lit")}
    ci-string:SingleQuotedStrCon -> Symbol {cons("CiLit")}

    fun:FunctionName "(" arguments:{Symbol ","}* ")" "->" result:Symbol Attributes 
	-> Production  {avoid, cons("PrefixFun")}
%%% $Id: Modules.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                 
module languages/sdf2/syntax/Modules

imports languages/sdf2/syntax/Kernel 
        languages/sdf2/syntax/Renaming

hiddens
  sorts ModuleWord
exports
  context-free start-symbols Module

  sorts ModuleId ModuleName Import Imports
        Section Sections Module Definition ImpSection

  lexical syntax    
    letters:[A-Za-z0-9\_\-]+ -> ModuleWord  {cons("Word")}

    ModuleWord              -> ModuleId  {cons("Leaf")}
    sep:"/" basename:ModuleId            -> ModuleId  {cons("Root")}
    dirname:ModuleWord sep:"/" basename:ModuleId -> ModuleId  {cons("Path")}
         
  context-free syntax
    list:Module* -> Definition

    "module" ModuleName list:ImpSection* Sections -> Module  {cons("Module")}

    "exports" Grammar            -> Section  {cons("Exports")}
    "hiddens" Grammar            -> Section  {cons("Hiddens")}

    list:Section*                -> Sections

    ModuleId                        -> ModuleName  {cons("Unparameterized")}
    ModuleId "[" params:Symbols "]" -> ModuleName  {cons("Parameterized")}

    "id" "(" ModuleName ")" -> Attribute  {cons("Id")}

    "imports" list:Imports -> ImpSection  {cons("Imports")}

    ImpSection -> Grammar  {cons("ImpSection")}

    list:Import* -> Imports

    ModuleName            -> Import  {cons("Module")}
    ModuleName Renamings  -> Import  {cons("RenamedModule")}
    "(" Import ")"        -> Import  {bracket}

  lexical restrictions
    ModuleWord -/- [A-Za-z0-9\_\-]
    ModuleId -/- [\/]
%%% $Id: Priority.sdf 20989 2007-01-22 14:57:57Z jurgenv $   

module languages/sdf2/syntax/Priority

imports languages/sdf2/syntax/Kernel

exports
  sorts Associativity ArgumentIndicator Group Priority Priorities

  context-free syntax
    "left"      -> Associativity  {cons("Left")}
    "right"     -> Associativity  {cons("Right")}
    "non-assoc" -> Associativity  {cons("NonAssoc")}
    "assoc"     -> Associativity  {cons("Assoc")}

    "bracket"     -> Attribute  {cons("Bracket")}
    Associativity -> Attribute  {cons("Assoc")}

    "<" arguments:{NatCon ","}+ ">" -> ArgumentIndicator {cons("Default")}

    Group ArgumentIndicator               -> Group {non-assoc,cons("WithArguments")}
    Group "."                             -> Group {non-assoc,cons("NonTransitive")}

    Production                            -> Group  {cons("SimpleGroup")}
    "{" Productions "}"                   -> Group  {cons("ProdsGroup")}
    "{" Associativity ":" Productions "}" -> Group  {cons("AssocGroup")}

    list:{Group ">"}+                                    -> Priority  {cons("Chain")}
    "left":Group Associativity "right":Group             -> Priority  {cons("Assoc")}
%%    Production "<" arguments:{NatCon ","}+ ">" ">" Group -> Priority  {cons("Argument")}

    list:{Priority  ","}* -> Priorities

    "priorities" Priorities  -> Grammar  {cons("Priorities")}
%%% $Id: Regular.sdf 17765 2006-02-13 12:54:52Z jurgenv $  

module languages/sdf2/syntax/Regular

imports languages/sdf2/syntax/Kernel 
imports languages/aterm/syntax/IntCon

exports
  context-free syntax
    "(" ")"                                       -> Symbol {cons("Empty")}
    "(" head:Symbol tail:Symbol+ ")"              -> Symbol {cons("Seq")}
    Symbol "?"                                    -> Symbol {cons("Opt")}
    Symbol "+"                                    -> Symbol {cons("Iter")}
    Symbol "*"                                    -> Symbol {cons("IterStar")}
    "{" Symbol sep:Symbol "}" "+"                 -> Symbol {cons("IterSep")}
    "{" Symbol sep:Symbol "}" "*"                 -> Symbol {cons("IterStarSep")}
    "<" head:Symbol "," rest:{Symbol ","}+ ">"    -> Symbol {cons("Tuple")}
    "(" arguments:Symbols "=>" results:Symbol ")" -> Symbol {cons("Func")}
    "left":Symbol "|" "right":Symbol              -> Symbol {right,cons("Alt")}
    "(" "left":Symbol "->" "right":Symbol ")"     -> Symbol {cons("Strategy")}

  context-free priorities
    {Symbol "?"               -> Symbol
    Symbol "*"                -> Symbol
    Symbol "+"                -> Symbol} >
    Symbol "|" Symbol         -> Symbol       
%%% $Id: Renaming.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                                                              
module languages/sdf2/syntax/Renaming

imports languages/sdf2/syntax/Kernel

exports
  sorts Renaming Renamings
  context-free syntax 
    "[" list:Renaming* "]" -> Renamings  {cons("Renamings")}

    from:Symbol "=>" to:Symbol                   -> Renaming  {cons("Symbol")}
    from-prod:Production "=>" to-prod:Production -> Renaming  {cons("Production")}

%%% $Id: Restrictions.sdf 17765 2006-02-13 12:54:52Z jurgenv $
               
module languages/sdf2/syntax/Restrictions

imports languages/sdf2/syntax/CC

exports
  sorts Lookahead Lookaheads Restriction Restrictions

  context-free syntax
    CharClass                          -> Lookahead  {cons("CharClass")}
    head:CharClass "." tail:Lookaheads -> Lookahead  {cons("Seq")}

    Lookahead                                -> Lookaheads  {cons("Single")}
    "left":Lookaheads "|" "right":Lookaheads -> Lookaheads  {cons("Alt"),right}
    "(" Lookaheads ")"                       -> Lookaheads  {bracket}
    "[[" list:{Lookahead ","}* "]]"          -> Lookaheads  {cons("List")}

    Symbols "-/-" Lookaheads -> Restriction  {cons("Follow")}

    list:Restriction* -> Restrictions

    "restrictions" Restrictions -> Grammar  {cons("Restrictions")}

    "reject" -> Attribute  {cons("Reject")}
    "prefer" -> Attribute  {cons("Prefer")}
    "avoid"  -> Attribute  {cons("Avoid")}

  context-free priorities    
    CharClass "." Lookaheads    -> Lookahead >
    Lookaheads "|" Lookaheads   -> Lookaheads
module languages/sdf2/syntax/Sdf2-Syntax

imports languages/sdf2/syntax/Kernel
        languages/sdf2/syntax/Basic
        languages/sdf2/syntax/Modules
        languages/sdf2/syntax/Regular
        languages/sdf2/syntax/Lifting
        languages/sdf2/syntax/Priority
        languages/sdf2/syntax/CC
        languages/sdf2/syntax/Sorts
        languages/sdf2/syntax/Start-Symbols
        languages/sdf2/syntax/Literals
        languages/sdf2/syntax/Labels
        languages/sdf2/syntax/Restrictions
        languages/sdf2/syntax/Aliases

exports
  sorts SDF

  context-free syntax
    "<START>" -> Symbol {cons("Start")}
    "<Start>" -> Symbol {cons("FileStart")}

    "lexical"      "priorities" Priorities      -> Grammar {cons("LexicalPriorities")}
    "context-free" "priorities" Priorities      -> Grammar {cons("ContextFreePriorities")}
    "lexical"      "restrictions" Restrictions  -> Grammar {cons("LexicalRestrictions")}
    "context-free" "restrictions" Restrictions  -> Grammar {cons("ContextFreeRestrictions")}

    "definition" Definition -> SDF {cons("Definition")}

  context-free priorities
    Symbol "|" Symbol  -> Symbol >
    Label ":" Symbol -> Symbol                  
%%% $Id: Sdf2.sdf 17765 2006-02-13 12:54:52Z jurgenv $

module languages/sdf2/syntax/Sdf2

imports languages/sdf2/syntax/Sdf2-Syntax

exports
  lexical syntax
    "LAYOUT"            -> Sort    {reject}

  context-free syntax
    "aliases"           -> ModuleName {reject}
    "lexical"           -> ModuleName {reject}
    "priorities"        -> ModuleName {reject}
    "context-free"      -> ModuleName {reject}
    "definition"        -> ModuleName {reject}
    "syntax"            -> ModuleName {reject}
    "variables"         -> ModuleName {reject}
    "module"            -> ModuleName {reject}
    "imports"           -> ModuleName {reject}
    "exports"           -> ModuleName {reject}
    "hiddens"           -> ModuleName {reject}
    "left"              -> ModuleName {reject}
    "right"             -> ModuleName {reject}
    "assoc"             -> ModuleName {reject}
    "non-assoc"         -> ModuleName {reject}
    "bracket"           -> ModuleName {reject}
    "sorts"             -> ModuleName {reject}
    "bracket"           -> ModuleName {reject}
    "sorts"             -> ModuleName {reject}
    "restrictions"      -> ModuleName {reject}

     StrCon "(" arguments:{Symbol ","}* ")" -> Symbols {reject}

     Associativity -> Label   {reject}
     Associativity -> ATermAttribute {reject}
     "reject"      -> ATermAttribute {reject}
     "prefer"      -> ATermAttribute {reject}
     "avoid"       -> ATermAttribute {reject}
     "bracket"     -> ATermAttribute {reject}
     "id" "(" ModuleName ")" -> ATermAttribute {reject}

  restrictions
    <Sort -CF>
    "aliases"
    "lexical"
    "priorities"
    "context-free"
    "definition"
    "syntax"
    "variables"
    "module"
    "imports"
    "exports"
    "hiddens"
    "left"
    "right"
    "assoc"
    "non-assoc"
    "bracket"
    "sorts"             -/- [A-Za-z0-9]
    <NatCon -CF>        -/- [0-9]
    <LAYOUT?-CF>        -/- [\ \t\n\%]
    <NumChar -CF>       -/- [0-9]
    <ModuleName -CF>    -/- [A-Za-z0-9\_\-]

exports
  context-free start-symbols
    SDF Module
%%% $Id: Sorts.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                       
module languages/sdf2/syntax/Sorts

imports languages/sdf2/syntax/Kernel

exports
  sorts Sort
  lexical syntax
    head:[A-Z]                          -> Sort {cons("OneChar")}
    head:[A-Z] middle:[A-Za-z0-9\-]* last:[A-Za-z0-9] -> Sort 
	{cons("MoreChars")}

  context-free syntax
    Sort                                    -> Symbol  {cons("Sort")}
    Sort "[[" parameters:{Symbol ","}+ "]]" -> Symbol  {cons("ParameterizedSort")}

    "sorts" Symbols -> Grammar {cons("Sorts")}

  lexical restrictions
    Sort -/- [A-Za-z0-9]
module languages/sdf2/syntax/Start-Symbols

imports languages/sdf2/syntax/Kernel

exports
  context-free syntax
  
    "start-symbols" Symbols                -> Grammar {cons("KernelStartSymbols")} 
    "lexical" "start-symbols" Symbols      -> Grammar {cons("LexicalStartSymbols")}
    "context-free" "start-symbols" Symbols -> Grammar {cons("ContextFreeStartSymbols")}
%%% $Id: Symbols.sdf 17765 2006-02-13 12:54:52Z jurgenv $
                     
module languages/sdf2/syntax/Symbols

imports basic/Comments

exports
  sorts Symbol Symbols

  context-free syntax
    "(" Symbol ")" -> Symbol {bracket}

    list:Symbol* -> Symbols

module basic/Comments

imports
  basic/Whitespace

exports
  lexical syntax
    "%%" line:~[\n]* "\n"       -> LAYOUT {cons("Line"),category("Comment")}
    "%" content:~[\%\n]+ "%"    -> LAYOUT {cons("Nested"),category("Comment")}
  context-free restrictions
    LAYOUT? -/- [\%]

module basic/Whitespace

exports
  lexical syntax
    [\ \t\n\r]  -> LAYOUT {cons("Whitespace")}

  context-free restrictions
    LAYOUT? -/- [\ \t\n\r]

module basic/StrCon

exports

sorts StrCon StrChar

lexical syntax
    "\\n"                      -> StrChar {cons("Newline")}
    "\\t"                      -> StrChar {cons("Tab")}
    "\\\""                     -> StrChar {cons("Quote")}
    "\\\\"                     -> StrChar {cons("Backslash")}
    "\\" a:[0-9]b:[0-9]c:[0-9] -> StrChar {cons("Decimal")}
    ~[\0-\31\n\t\"\\]          -> StrChar {cons("Normal")}

    [\"] chars:StrChar* [\"]   -> StrCon  {cons("Default")}

module basic/IdentifierCon

exports

sorts IdCon

lexical syntax

head:[A-Za-z] tail:[A-Za-z\-0-9]* -> IdCon {cons("Default")}

lexical restrictions

IdCon -/- [A-Za-z\-0-9]

module languages/aterm/syntax/ATerms

imports languages/aterm/syntax/IntCon
        languages/aterm/syntax/RealCon
        basic/StrCon
        basic/IdentifierCon

exports
  sorts AFun ATerm Annotation

  context-free syntax
        StrCon  -> AFun {cons("Quoted")}
        IdCon   -> AFun {cons("Unquoted")}

  context-free syntax
        IntCon                                  -> ATerm {cons("Int")}
        RealCon                                 -> ATerm {cons("Real")}
        fun:AFun                                -> ATerm {cons("Fun")}
        fun:AFun "(" args:{ATerm ","}+ ")"      -> ATerm {cons("Appl")}
        "<" type:ATerm ">"                      -> ATerm {cons("Placeholder")}
        "[" elems:{ATerm ","}* "]"              -> ATerm {cons("List")}
        trm:ATerm Annotation                    -> ATerm {cons("Annotated")}

  context-free syntax
        "{" annos:{ ATerm ","}+ "}"             -> Annotation {cons("Default")}

hiddens
  context-free start-symbols
    ATerm

module languages/aterm/syntax/IntCon

imports basic/Whitespace
        basic/NatCon

hiddens
  context-free start-symbols
    IntCon

exports
  sorts IntCon
  context-free syntax
    NatCon         -> IntCon {cons("Natural")}
    pos:"+" NatCon -> IntCon {cons("Positive")}
    neg:"-" NatCon -> IntCon {cons("Negative")}

module languages/aterm/syntax/RealCon

imports languages/aterm/syntax/IntCon

hiddens
  context-free start-symbols
    RealCon

exports
  sorts OptExp RealCon

  context-free syntax
    "e" IntCon -> OptExp {cons("Present")}
               -> OptExp {cons("Absent")}

    base:IntCon "." decimal:NatCon exp:OptExp  -> RealCon {cons("RealCon")}

module basic/IntCon

imports basic/NatCon
exports

sorts Integer

context-free syntax
        NatCon -> Integer {cons("NatCon")}
        "+" integer:Integer -> Integer {non-assoc, cons("Positive")}
        "-" integer:Integer -> Integer {non-assoc, cons("Negative")}

context-free priorities
  {non-assoc:
    "+" integer:Integer -> Integer {non-assoc, cons("Positive")}
    "-" integer:Integer -> Integer {non-assoc, cons("Negative")}
  }

module basic/NatCon

exports

sorts NatCon

lexical syntax

 [0-9]+ -> NatCon {cons("Digits")}

lexical restrictions

 NatCon -/- [0-9]